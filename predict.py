import torch
from torchvision import transforms
from torchvision.transforms.functional import to_pil_image
from PIL import Image
import sys
import matplotlib.pyplot as plt
import torch.nn.functional as F
from models.resnetCIFAR_custom import ResNet18Custom
from torchcam.methods import GradCAM
from torchcam.utils import overlay_mask

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ===
CIFAR10_CLASSES = ['airplane', 'automobile', 'bird', 'cat', 'deer',
                   'dog', 'frog', 'horse', 'ship', 'truck']

# === –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ ===
if len(sys.argv) != 2:
    print("‚ö†Ô∏è  –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python predict.py path_to_image.jpg")
    sys.exit(1)

image_path = sys.argv[1]

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ ===
model = ResNet18Custom(num_classes=10)
model.load_state_dict(torch.load("best_model.pth", map_location="cpu"))
model.eval()

# === CAM extractor –¥–ª—è —à–∞—Ä—É 'layer4'
cam_extractor = GradCAM(model.model, target_layer='layer4')

# === –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
try:
    image = Image.open(image_path).convert("RGB")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
    sys.exit(1)

input_tensor = transform(image).unsqueeze(0)  # [1, 3, 224, 224]

# === –ü–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è
output = model(input_tensor)
class_idx = output.argmax().item()

# === Grad-CAM ===
activation_map = cam_extractor(class_idx, output)

# –í–∏—Ç—è–≥—É—î–º–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ–π–Ω—É –∫–∞—Ä—Ç—É —Ç–∞ –∫–æ—Ä–µ–≥—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ
cam = activation_map[0].detach()

# –Ø–∫—â–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ–π–Ω–∞ –∫–∞—Ä—Ç–∞ –º–∞—î —Ñ–æ—Ä–º—É [1, 7, 7] - –≤–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π —Ä–æ–∑–º—ñ—Ä
if cam.dim() == 3:
    cam = cam.squeeze(0)  # —Ç–µ–ø–µ—Ä [7, 7]

# –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è
cam = (cam - cam.min()) / (cam.max() - cam.min())

# –î–æ–¥–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ batch (N) —Ç–∞ channel (C)
cam = cam.unsqueeze(0).unsqueeze(0)  # —Ç–µ–ø–µ—Ä [1, 1, 7, 7]

# –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è –¥–æ —Ä–æ–∑–º—ñ—Ä—ñ–≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
cam = F.interpolate(
    cam,
    size=(image.size[1], image.size[0]),  # (–≤–∏—Å–æ—Ç–∞, —à–∏—Ä–∏–Ω–∞)
    mode="bilinear",
    align_corners=False
)  # —Ä–µ–∑—É–ª—å—Ç–∞—Ç [1, 1, H, W]

# –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ
cam = cam.squeeze().cpu().numpy()  # —Ç–µ–ø–µ—Ä [H, W]

# –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–ø–ª–æ–≤—É –∫–∞—Ä—Ç—É –≤ PIL Image
heatmap = to_pil_image(cam, mode="F")

# –ù–∞–∫–ª–∞–¥–∞—î–º–æ –º–∞—Å–∫—É
result = overlay_mask(image, heatmap, alpha=0.5)


# === –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print(f"‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: –∫–ª–∞—Å {class_idx} ‚Äî {CIFAR10_CLASSES[class_idx]}")

# === –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
result.save("cam_output.png")
print("üíæ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Grad-CAM –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ cam_output.png")

# === –ü–æ–∫–∞–∑
plt.imshow(result)
plt.title(f"Class: {CIFAR10_CLASSES[class_idx]}")
plt.axis("off")
plt.show()